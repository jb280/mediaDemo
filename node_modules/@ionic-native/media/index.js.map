{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/media/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { CordovaInstance, InstanceProperty, IonicNativePlugin, Plugin, checkAvailability } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\n/**\n * @hidden\n */\nexport class MediaObject {\n\n  /**\n   * An observable that notifies you on actions success\n   */\n  onSuccess: Observable<any>;\n\n  /**\n   * An observable that notifies you when an error occurs\n   */\n  onError: Observable<MEDIA_ERROR>;\n\n  /**\n   * An observable that notifies you when the file status changes\n   */\n  onStatusUpdate: Observable<MEDIA_STATUS>;\n\n  /**\n   * @hidden\n   */\n  @InstanceProperty\n  successCallback: Function;\n\n  /**\n   * @hidden\n   */\n  @InstanceProperty\n  errorCallback: Function;\n\n  /**\n   * @hidden\n   */\n  @InstanceProperty\n  statusCallback: Function;\n\n  constructor(private _objectInstance: any) {\n    this.onSuccess = new Observable<any>((observer: Observer<any>) => {\n      this.successCallback = observer.next.bind(observer);\n      return () => this.successCallback = () => {};\n    });\n\n    this.onError = new Observable<MEDIA_ERROR>((observer: Observer<MEDIA_ERROR>) => {\n      this.errorCallback = observer.next.bind(observer);\n      return () => this.errorCallback = () => {};\n    });\n\n    this.onStatusUpdate = new Observable<MEDIA_STATUS>((observer: Observer<MEDIA_STATUS>) => {\n      this.statusCallback = observer.next.bind(observer);\n      return () => this.statusCallback = () => {};\n    });\n  }\n\n  /**\n   * Get the current amplitude of the current recording.\n   * @returns {Promise<any>} Returns a promise with the amplitude of the current recording\n   */\n  @CordovaInstance()\n  getCurrentAmplitude(): Promise<any> { return; }\n\n  /**\n   * Get the current position within an audio file. Also updates the Media object's position parameter.\n   * @returns {Promise<any>} Returns a promise with the position of the current recording\n   */\n  @CordovaInstance()\n  getCurrentPosition(): Promise<any> { return; }\n\n  /**\n   * Get the duration of an audio file in seconds. If the duration is unknown, it returns a value of -1.\n   * @returns {number} Returns a promise with the duration of the current recording\n   */\n  @CordovaInstance({ sync: true })\n  getDuration(): number { return; }\n\n  /**\n   * Starts or resumes playing an audio file.\n   */\n  @CordovaInstance({ sync: true })\n  play(iosOptions?: {\n    numberOfLoops?: number,\n    playAudioWhenScreenIsLocked?: boolean\n  }): void { }\n\n  /**\n   * Pauses playing an audio file.\n   */\n  @CordovaInstance({ sync: true })\n  pause(): void { }\n\n  /**\n   * Releases the underlying operating system's audio resources. This is particularly important for Android, since there are a finite amount of OpenCore instances for media playback. Applications should call the release function for any Media resource that is no longer needed.\n   */\n  @CordovaInstance({ sync: true })\n  release(): void { }\n\n  /**\n   * Sets the current position within an audio file.\n   * @param {number} milliseconds The time position you want to set for the current audio file\n   */\n  @CordovaInstance({ sync: true })\n  seekTo(milliseconds: number): void { }\n\n  /**\n   * Set the volume for an audio file.\n   * @param volume {number} The volume to set for playback. The value must be within the range of 0.0 to 1.0.\n   */\n  @CordovaInstance({ sync: true })\n  setVolume(volume: number): void { }\n\n  @CordovaInstance({ sync: true })\n  setRate(speedRate: number): void {}\n\n  /**\n   * Starts recording an audio file.\n   */\n  @CordovaInstance({ sync: true })\n  startRecord(): void { }\n\n  /**\n   * Stops recording\n   */\n  @CordovaInstance({ sync: true })\n  stopRecord(): void { }\n\n  /**\n   * Pauses recording\n   */\n  @CordovaInstance({ sync: true })\n  pauseRecord(): void { }\n\n  /**\n   * Resumes recording\n   */\n  @CordovaInstance({ sync: true })\n  resumeRecord(): void { }\n\n  /**\n   * Stops playing an audio file.\n   */\n  @CordovaInstance({ sync: true })\n  stop(): void { }\n\n}\n\nexport type MediaStatusUpdateCallback = (statusCode: number) => void;\n\nexport interface MediaError {\n\n  /**\n   * Error message\n   */\n  message: string;\n\n  /**\n   * Error code\n   */\n  code: number;\n\n}\n\nexport enum MEDIA_STATUS {\n  NONE = 0,\n  STARTING,\n  RUNNING,\n  PAUSED,\n  STOPPED\n}\n\nexport enum MEDIA_ERROR {\n  ABORTED = 1,\n  NETWORK,\n  DECODE,\n  SUPPORTED\n}\n\nexport type MediaErrorCallback = (error: MediaError) => void;\n\n/**\n * @name Media\n * @description\n * This plugin provides the ability to record and play back audio files on a device.\n *\n * @usage\n * ```typescript\n * import { Media, MediaObject } from '@ionic-native/media';\n *\n *\n * constructor(private media: Media) { }\n *\n *\n * ...\n *\n *\n * // Create a Media instance.  Expects path to file or url as argument\n * // We can optionally pass a second argument to track the status of the media\n *\n * const file: MediaObject = this.media.create('file.mp3');\n *\n * // to listen to plugin events:\n *\n * file.onStatusUpdate.subscribe(status => console.log(status)); // fires when file status changes\n *\n * file.onSuccess.subscribe(() => console.log('Action is successful'));\n *\n * file.onError.subscribe(error => console.log('Error!', error));\n *\n * // play the file\n * file.play();\n *\n * // pause the file\n * file.pause();\n *\n * // get current playback position\n * file.getCurrentPosition().then((position) => {\n *   console.log(position);\n * });\n *\n * // get file duration\n * let duration = file.getDuration();\n * console.log(duration);\n *\n * // skip to 10 seconds (expects int value in ms)\n * file.seekTo(10000);\n *\n * // stop playing the file\n * file.stop();\n *\n * // release the native audio resource\n * // Platform Quirks:\n * // iOS simply create a new instance and the old one will be overwritten\n * // Android you must call release() to destroy instances of media when you are done\n * file.release();\n *\n *\n *\n * // Recording to a file\n * const file: MediaObject = this.media.create('path/to/file.mp3');\n *\n * file.startRecord();\n *\n * file.stopRecord();\n *\n *\n * ```\n *\n * Some hints if you are using iOS and recording doesn't work:\n * 1.) Try to use a absolute file path but remove beginning \"file://\".\n * Then it looks like: `/var/mobile/Containers/Data/Application/AF438B8B-7724-4FBB-8E69-083463224FC4/tmp/my_file.m4a`\n * Example: `this.media.create(this.file.tempDirectory.replace(/^file:\\/\\//, '') + 'my_file.m4a')`\n * 2.) If that's not working, too, create the file before using.\n * Example:\n * ```typescript\n * import { Media, MediaObject } from '@ionic-native/media';\n * import { File } from '@ionic-native/file';\n *\n * ...\n *\n * constructor(private media: Media, private file: File) { }\n *\n * ...\n *\n * this.file.createFile(this.file.tempDirectory, 'my_file.m4a', true).then(() => {\n *   let file = this.media.create(this.file.tempDirectory.replace(/^file:\\/\\//, '') + 'my_file.m4a');\n *   file.startRecord();\n *   window.setTimeout(() => file.stopRecord(), 10000);\n * });\n * ```\n *\n * You can find the reasons here: https://github.com/ionic-team/ionic-native/issues/1452#issuecomment-299605906\n * @classes\n * MediaObject\n * @interfaces\n * MediaError\n */\n@Plugin({\n  pluginName: 'Media',\n  repo: 'https://github.com/apache/cordova-plugin-media',\n  plugin: 'cordova-plugin-media',\n  pluginRef: 'Media',\n  platforms: ['Android', 'Browser', 'iOS', 'Windows']\n})\n@Injectable()\nexport class Media extends IonicNativePlugin {\n\n  // Constants\n  /**\n   * @hidden\n   */\n  MEDIA_NONE = 0;\n  /**\n   * @hidden\n   */\n  MEDIA_STARTING = 1;\n  /**\n   * @hidden\n   */\n  MEDIA_RUNNING = 2;\n  /**\n   * @hidden\n   */\n  MEDIA_PAUSED = 3;\n  /**\n   * @hidden\n   */\n  MEDIA_STOPPED = 4;\n\n  // error codes\n  /**\n   * @hidden\n   */\n  MEDIA_ERR_ABORTED = 1;\n  /**\n   * @hidden\n   */\n  MEDIA_ERR_NETWORK = 2;\n  /**\n   * @hidden\n   */\n  MEDIA_ERR_DECODE = 3;\n  /**\n   * @hidden\n   */\n  MEDIA_ERR_NONE_SUPPORTED = 4;\n\n  /**\n   * Open a media file\n   * @param src {string} A URI containing the audio content.\n   * @return {MediaObject}\n   */\n  create(src: string): MediaObject {\n    let instance: any;\n\n    if (checkAvailability(Media.getPluginRef(), null, Media.getPluginName()) === true) {\n      // Creates a new media object\n      instance = new (Media.getPlugin())(src);\n    }\n\n    return new MediaObject(instance);\n  }\n\n}\n"]}